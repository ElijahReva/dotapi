
[assembly: Microsoft.FSharp.Core.FSharpInterfaceDataVersionAttribute(2, 0, 0)]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v2.1", FrameworkDisplayName="")]
namespace dotapi
{
    [Microsoft.FSharp.Core.CompilationMappingAttribute(Microsoft.FSharp.Core.SourceConstructFlags.Module)]
    public class static Api
    {
        public static void Describe(Argu.ParseResults<dotapi.DescribeArgs> describe) { }
        public static void Main(Argu.ParseResults<dotapi.Args> describe) { }
    }
    [Microsoft.FSharp.Core.CompilationMappingAttribute(Microsoft.FSharp.Core.SourceConstructFlags.SumType)]
    [System.Diagnostics.DebuggerDisplayAttribute("{__DebugDisplay(),nq}")]
    public abstract class Args : Argu.IArgParserTemplate, System.Collections.IStructuralEquatable, System.IEquatable<dotapi.Args>
    {
        [Microsoft.FSharp.Core.CompilationMappingAttribute(Microsoft.FSharp.Core.SourceConstructFlags.UnionCase, 0)]
        public static dotapi.Args NewBinaries(Microsoft.FSharp.Collections.FSharpList<string> _files) { }
        [Microsoft.FSharp.Core.CompilationMappingAttribute(Microsoft.FSharp.Core.SourceConstructFlags.UnionCase, 2)]
        public static dotapi.Args NewDescribe(Argu.ParseResults<dotapi.DescribeArgs> item) { }
        [Microsoft.FSharp.Core.CompilationMappingAttribute(Microsoft.FSharp.Core.SourceConstructFlags.UnionCase, 1)]
        public static dotapi.Args NewOutput(string _filePath) { }
        [System.Diagnostics.DebuggerDisplayAttribute("{__DebugDisplay(),nq}")]
        [System.Diagnostics.DebuggerTypeProxyAttribute(typeof(dotapi.Args.Binaries@DebugTypeProxy))]
        public class Binaries : dotapi.Args { }
        [System.Diagnostics.DebuggerDisplayAttribute("{__DebugDisplay(),nq}")]
        [System.Diagnostics.DebuggerTypeProxyAttribute(typeof(dotapi.Args.Describe@DebugTypeProxy))]
        public class Describe : dotapi.Args { }
        [System.Diagnostics.DebuggerDisplayAttribute("{__DebugDisplay(),nq}")]
        [System.Diagnostics.DebuggerTypeProxyAttribute(typeof(dotapi.Args.Output@DebugTypeProxy))]
        public class Output : dotapi.Args { }
        public class static Tags
        {
            public const int Binaries = 0;
            public const int Describe = 2;
            public const int Output = 1;
        }
    }
    [Microsoft.FSharp.Core.CompilationMappingAttribute(Microsoft.FSharp.Core.SourceConstructFlags.SumType)]
    [System.Diagnostics.DebuggerDisplayAttribute("{__DebugDisplay(),nq}")]
    public abstract class DescribeArgs : Argu.IArgParserTemplate, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable, System.IComparable, System.IComparable<dotapi.DescribeArgs>, System.IEquatable<dotapi.DescribeArgs>
    {
        [Microsoft.FSharp.Core.CompilationMappingAttribute(Microsoft.FSharp.Core.SourceConstructFlags.UnionCase, 0)]
        public static dotapi.DescribeArgs NewBinaries(Microsoft.FSharp.Collections.FSharpList<string> _files) { }
        [Microsoft.FSharp.Core.CompilationMappingAttribute(Microsoft.FSharp.Core.SourceConstructFlags.UnionCase, 1)]
        public static dotapi.DescribeArgs NewOutput(string _filePath) { }
        [System.Diagnostics.DebuggerDisplayAttribute("{__DebugDisplay(),nq}")]
        [System.Diagnostics.DebuggerTypeProxyAttribute(typeof(dotapi.DescribeArgs.Binaries@DebugTypeProxy))]
        public class Binaries : dotapi.DescribeArgs { }
        [System.Diagnostics.DebuggerDisplayAttribute("{__DebugDisplay(),nq}")]
        [System.Diagnostics.DebuggerTypeProxyAttribute(typeof(dotapi.DescribeArgs.Output@DebugTypeProxy))]
        public class Output : dotapi.DescribeArgs { }
        public class static Tags
        {
            public const int Binaries = 0;
            public const int Output = 1;
        }
    }
    [Microsoft.FSharp.Core.AutoOpenAttribute()]
    [Microsoft.FSharp.Core.CompilationMappingAttribute(Microsoft.FSharp.Core.SourceConstructFlags.Module)]
    public class static Helper
    {
        [Microsoft.FSharp.Core.CompilationArgumentCountsAttribute(new int[] {
                1,
                1})]
        public static string collectWith<a>(a splitter, System.Collections.Generic.IEnumerable<string> str) { }
    }
    [Microsoft.FSharp.Core.CompilationMappingAttribute(Microsoft.FSharp.Core.SourceConstructFlags.Module)]
    public class static Logger
    {
        public static void CreateLogger(Argu.ParseResults<dotapi.Args> parsed) { }
    }
}
[Microsoft.FSharp.Core.CompilationMappingAttribute(Microsoft.FSharp.Core.SourceConstructFlags.Module)]
public class static Program
{
    [Microsoft.FSharp.Core.CompilationMappingAttribute(Microsoft.FSharp.Core.SourceConstructFlags.Value)]
    public static Argu.ProcessExiter errorHandler { get; }
    [Microsoft.FSharp.Core.CompilationMappingAttribute(Microsoft.FSharp.Core.SourceConstructFlags.Value)]
    public static Argu.ArgumentParser<dotapi.Args> parser { get; }
    [Microsoft.FSharp.Core.EntryPointAttribute()]
    public static int main(string[] argv) { }
    public static void mainUnsafe(string[] argv) { }
    [Microsoft.FSharp.Core.CompilationArgumentCountsAttribute(new int[] {
            1,
            1})]
    public static void mainUnsafeWith(string[] argv, Microsoft.FSharp.Core.FSharpFunc<Argu.ParseResults<dotapi.Args>, Microsoft.FSharp.Core.Unit> loggerFactory) { }
    public static void run(Argu.ParseResults<dotapi.Args> parseResults) { }
}